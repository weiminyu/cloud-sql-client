buildscript {
    // Lock buildscript dependencies.
    configurations.classpath {
      resolutionStrategy.activateDependencyLocking()
    }
  }

plugins {
  id 'com.diffplug.gradle.spotless' version '3.18.0' apply false
  // gradlew <GradleTask> taskTree
  id "com.dorongold.task-tree" version "1.4"
}

dependencyLocking {
    lockAllConfigurations()
  }


subprojects { 

  repositories {
    mavenCentral()
  }

  buildscript {
    // Lock buildscript dependencies.
    configurations.classpath {
      resolutionStrategy.activateDependencyLocking()
    }
  }

  // Lock application dependencies.
  dependencyLocking {
    lockAllConfigurations()
  }

  apply plugin: 'java'
  apply plugin: 'java-library'
  apply plugin: 'com.diffplug.gradle.spotless'

  spotless {
    java {
      googleJavaFormat()
    }
    format 'misc', {
      target '**/*.gradle', '**/*.md', '**/.gitignore', '**/*.sql'

      targetExclude 'src/test/resources/**/*.sql'

      trimTrailingWhitespace()
      indentWithSpaces(2)
      endWithNewline()
    }
  }

  ext.getPropertyOrDefault = { name, defaultValue ->
    if (project.hasProperty(name)) {
      return project.findProperty(name)
    }
    return defaultValue
  }

  dependencies {
    compile 'com.google.guava:guava:26.0-jre'

    testCompile 'com.google.truth.extensions:truth-java8-extension:0.45'
    testCompile 'com.google.truth:truth:0.45'
    testCompile 'junit:junit:4.13-beta-2'
  }

  test {
    testLogging.showStandardStreams = true
  }
}
